#https://docs.github.com/en/actions/use-cases-and-examples/deploying/deploying-to-azure-kubernetes-service
#https://github.com/marketplace/actions/azure-login#login-with-a-service-principal-secret
#https://cert-manager.io/docs/installation/helm/

name: Deploy Nginx to aks

on:
    workflow_dispatch:

permissions:
  id-token: write # Required for OIDC authentication
  contents: read # Required to read repository contents
  actions: read # Required for GitHub Actions
  checks: write # Required for status checks

# env:
#    RESOURCE_GROUP: resource_group_name
#    AKS_CLUSTER_NAME: aks_cluster_name
#    ACR_NAME: azurerm_container_registry
#    APPGW_ID: app_gateway_id
#    IDENTITY_CLIENT_ID: agic_identity_client_id
#    APP_GATEWAY_NAME: app_gateway_name
#    IDENTITY_RESOURCE_ID: identity_resource_id


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}
        enable-AzPSSession: true

    # - name: Grant aks access to ACR
    #   run: |
    #     aks_CLIENT_ID=$(az aks show --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME--query "identityProfile.kubeletidentity.clientId" -o tsv)
    #     ACR_ID=$(az acr show --name $ACR_NAME --query id -o tsv)

    #     echo "Granting AcrPull role to aks kubelet identity..."
    #     az role assignment create \
    #       --assignee $aks_CLIENT_ID \
    #       --role "AcrPull" \
    #       --scope $ACR_ID
  
    - name: Debug environment values
      run: |
        echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME"
        echo "RESOURCE_GROUP=$RESOURCE_GROUP"
        echo "ACR_NAME=$ACR_NAME"

    - name: Attach ACR to aks
      run: |
        az aks update -n $AKS_CLUSTER_NAME -g $RESOURCE_GROUP --attach-acr $ACR_NAME
  
    - name: Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: $ACR_NAME.azurecr.io
        username: ${{ secrets.AZURE_CLIENT_ID }} 
        password: ${{ secrets.AZURE_CLIENT_SECRET }} 

    - name: Build and push to ACR
      run: |
        docker pull abdulnaser93/my-nginx:latest
        docker tag abdulnaser93/my-nginx:latest $ACR_NAME.azurecr.io/my-nginx:latest
        docker push $ACR_NAME.azurecr.io/my-nginx:latest


    - name: Set up Kubernetes tools
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Setup kubelogin
      uses: azure/use-kubelogin@v1
      with:
       kubelogin-version: 'v0.0.26'
    
    - name: Set aks context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
       resource-group: $RESOURCE_GROUP
       cluster-name: $AKS_CLUSTER_NAME
       admin: 'false'
       use-kubelogin: 'true' 

    - name: Install Helm
      uses: azure/setup-helm@v3

    # - name: Add Ingress-nginx Helm repo
    #   run: |
    #     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    #     helm repo update     
        
    # - name: Install NGINX Ingress Controller 
    #   run: |
    #     helm install ingress-nginx ingress-nginx/ingress-nginx \
    #       --create-namespace \
    #       --namespace ingress-basic \
    #       --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
    #       --set controller.service.externalTrafficPolicy=Local

    - name: Add the Jetstack Helm repository
      run: |
        helm repo add jetstack https://charts.jetstack.io --force-update
        helm repo update 

    - name: Install cert-manager
      run: |
        helm upgrade --install cert-manager jetstack/cert-manager \
          --namespace ingress-basic \
          --create-namespace \
          --version v1.17.0 \
          --set crds.enabled=true \
          --force      



    # - name: Install APG Controller 
    #   run: |
    #     az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME

    #     helm upgrade --install ingress-azure \
    #       --namespace ingress-basic \
    #       oci://mcr.microsoft.com/azure-application-gateway/charts/ingress-azure \
    #       --set appgw.applicationGatewayID=$APPGW_ID \
    #       --set armAuth.type=workloadIdentity \
    #       --set armAuth.identityClientID=$IDENTITY_CLIENT_ID \
    #       --set rbac.enabled=true \
    #       --version 1.7.3 
    - name: Install AGIC Controller
      run: |
        # Get AKS credentials
        az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME
    
        # Add the Helm repo (use China cloud if needed)
        helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.chinacloudapi.cn/ingress-azure-helm-package/
        helm repo update
    
        # Download the Helm config
        wget https://raw.githubusercontent.com/Azure/application-gateway-kubernetes-ingress/master/docs/examples/sample-helm-config.yaml -O helm-config.yaml
    
        # Update the Helm config with environment variables
        sed -i "s|<subscription-id>|${{ secrets.AZURE_SUBSCRIPTION }}|g" helm-config.yaml
        sed -i "s|<resource-group-name>|$RESOURCE_GROUP|g" helm-config.yaml
        sed -i "s|<application-gateway-name>|$APP_GATEWAY_NAME|g" helm-config.yaml
        sed -i "s|<identity-resource-id>|$IDENTITY_RESOURCE_ID|g" helm-config.yaml
        sed -i "s|<identity-client-id>|$IDENTITY_CLIENT_ID|g" helm-config.yaml
        sed -i "s|<watch-namespace>|ingress-basic|g" helm-config.yaml
    
        # Install AGIC using Helm config
        helm install -f helm-config.yaml application-gateway-kubernetes-ingress/ingress-azure --generate-name

  

    - name: Deploy to aks
      uses: azure/k8s-deploy@v3
      with:
        namespace: ingress-basic
        manifests: |
          k8s/nginx-deployment.yml
          k8s/ingress.yml
          k8s/issuer.yml
        # k8s/nginx-service.yml
          # k8s/azure-file-sc.yml
          # k8s/azure-file-pvc.yml