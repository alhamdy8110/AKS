name: Deploy Nginx to AKS

on:
    workflow_dispatch:

permissions:
  id-token: write # Required for OIDC authentication
  contents: read # Required to read repository contents
  actions: read # Required for GitHub Actions
  checks: write # Required for status checks

env:
   RESOURCE_GROUP: rg-aks
   AKS_CLUSTER_NAME: aks-cluster
   ACR_NAME: acraksclusternginx


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}
        enable-AzPSSession: true

    - name: Grant AKS access to ACR
      run: |
        AKS_CLIENT_ID=$(az aks show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --query "identityProfile.kubeletidentity.clientId" -o tsv)
        ACR_ID=$(az acr show --name ${{ env.ACR_NAME }} --query id -o tsv)

        echo "Granting AcrPull role to AKS kubelet identity..."
        az role assignment create \
          --assignee $AKS_CLIENT_ID \
          --role "AcrPull" \
          --scope $ACR_ID
  
    - name: Attach ACR to AKS
      run: |
        az aks update -n ${{ env.AKS_CLUSTER_NAME }} -g ${{ env.RESOURCE_GROUP }} --attach-acr ${{ env.ACR_NAME }}
  
    - name: Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_CLIENT_ID }} 
        password: ${{ secrets.AZURE_CLIENT_SECRET }} 

    - name: Build and push to ACR
      run: |
        docker pull abdulnaser93/my-nginx:latest
        docker tag abdulnaser93/my-nginx:latest ${{ env.ACR_NAME }}.azurecr.io/my-nginx:latest
        docker push ${{ env.ACR_NAME }}.azurecr.io/my-nginx:latest


    - name: Set up Kubernetes tools
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Setup kubelogin
      uses: azure/use-kubelogin@v1
      with:
       kubelogin-version: 'v0.0.26'
    
    - name: Set AKS context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
       resource-group: '${{ env.RESOURCE_GROUP }}' 
       cluster-name: '${{ env.AKS_CLUSTER_NAME }}'
       admin: 'false'
       use-kubelogin: 'true' 

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Add Ingress-nginx Helm repo
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update     
        
    - name: Install NGINX Ingress Controller 
      run: |
        helm install ingress-nginx ingress-nginx/ingress-nginx \
          --create-namespace \
          --namespace ingress-basic \
          --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
          --set controller.service.externalTrafficPolicy=Local

    - name: Add the Jetstack Helm repository
      run: |
        helm repo add jetstack https://charts.jetstack.io --force-update
        helm repo update 

    - name: Install cert-manager
      run: |
        helm upgrade --install cert-manager jetstack/cert-manager \
          --namespace ingress-basic \
          --create-namespace \
          --version v1.17.0 \
          --set crds.enabled=true \
          --force      


    - name: Deploy to AKS
      uses: azure/k8s-deploy@v3
      with:
        manifests: |
          k8s/azure-file-sc.yml
          k8s/azure-file-pvc.yml
          k8s/nginx-deployment.yml
          k8s/ingress.yml
          k8s/issuer.yml
#         k8s/nginx-service.yml